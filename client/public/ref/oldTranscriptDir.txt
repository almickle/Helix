import { useEffect } from "react"
import { useState } from "react"
import Icon from "./Icon"
import NaviLines from "./NaviLines"
import Protein from "./Protein"

export default function Transcript ( { label, height, dotSize, margin, index, transcripts, setSequenceID, setPresentView, setTranscriptIndex, transcriptColor, setNaviLineHeight, initialNaviLineHeight} ) {

    const [expandedDirectory, setExpandedDirectory] = useState(false)
    const [targetLineID, setTargetLineId] = useState(1)

    useEffect(() => {
        if(expandedDirectory === true) {
            setNaviLineHeight([53])
        } else {
            setNaviLineHeight([initialNaviLineHeight])
        }
        // eslint-disable-next-line
    }, [expandedDirectory])


    useEffect(() => {
        if(targetLineID < transcripts.length) {
            if(document.getElementById('protein-label')) {
                const height = document.getElementById('protein-label').offsetHeight
                if(expandedDirectory === true) document.getElementById(`NaviLine ${targetLineID}`).style.height = `${height+35}px`
                else document.getElementById(`NaviLine ${targetLineID}`).style.height = '24px'
            }
        }   
    }, [targetLineID, expandedDirectory, transcripts])


    const directoryContent = () => {
        if(expandedDirectory === true) {
            return (
                <div style={{ display: 'flex', flexDirection: 'row', height: 'fit-content', marginTop: margin }}>
                    <div style={{ display: 'flex', flexDirection: 'column', height: 'fit-content', justifyContent: 'flex-start', marginLeft: (dotSize/2-1) }}>
                        <NaviLines height='53px' id={'NaviLine 1'}/>
                    </div>
                    <div style={{ display: 'flex', flexDirection: 'column', height: 'fit-content', marginTop: height/2-1+margin }}>
                        <Protein setTranscriptIndex={setTranscriptIndex} transcriptIndex={index} transcripts={transcripts} setSequenceID={setSequenceID} setPresentView={setPresentView} height={height} protein={transcripts[index].protein}/>
                    </div>
                </div>
            )
        }
            else {
                return <div></div>
            }
    }

    function handleClickTranscript(event) {
        const num = parseInt(event.target.id)
        setExpandedDirectory(!expandedDirectory)
        setTargetLineId(num+1)
    }

    function handleDoubleClickTranscript(event) {
        const transcriptIndex = event.target.id
        setSequenceID(transcripts[transcriptIndex].accession_version)
        setPresentView('RNA')
        setTranscriptIndex(transcriptIndex)
    }


    return (
        <div style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', fontSize: 16 }}>
            <div onClick={handleClickTranscript} onDoubleClick={handleDoubleClickTranscript} style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'center', fontSize: 15, cursor: 'pointer' }}>
                <span style={{ display: 'flex', height: 1, width: 12, backgroundColor: 'black' }}></span>
                <Icon />
                <span id={index} style={{ marginBottom: 1.9, color: transcriptColor }}>{label}</span>
            </div>
            {directoryContent()}
        </div>
        
    )
}


// const transcriptID = transcripts[num].ensembl_transcript
// if (transcriptID.includes('.')) {setSequenceID(transcriptID.split('.')[0])}
// else {setSequenceID(transcriptID)}