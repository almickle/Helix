// const atomVectors = atoms.map((atom) => {
            //     return (
            //         new Vector3(atom.x, atom.y, atom.z)
            //     )
            // })

        //     let total_X = 0
        //     let total_Y = 0
        //     let total_Z = 0
        //     atomVectors.forEach((atom) => {
        //          total_X += atom.x
        //          total_Y += atom.y
        //          total_Z += atom.z
        //     })
        //     const centroid = new Vector3(total_X/atomVectors.length, total_Y/atomVectors.length, total_Z/atomVectors.length)
        //     centroid_camera.push(centroid)

        //     const pointCloud = new PointsCloudSystem('pointCloud', 0, scene)
        //     atoms.forEach((atom) => {
        //         pointCloud.addPoints(1, (particle) => {
        //             particle.position = atom
        //         })
        //     })

        //     pointCloud.buildMeshAsync()

        //     camera.setTarget(centroid)
        //     camera.attachControl(canvas, true);

        // const carbonyl = residue.filter((atom) => atom.atom_type === 'O' || atom.atom_type === 'C' || atom.atom_type === 'CA').map((atom) => new Vector3(atom.x, atom.y, atom.z))
        // MeshBuilder.CreateTube('main', {path: carbonyl, radius: 0.2}, scene)

            
            
            
        // })



"proxy": "http://127.0.0.1:3500",


// const x1 = points[0].x
//     const y1 = points[0].y
//     const z1 = points[0].z
//     const x2 = points[1].x
//     const y2 = points[1].y
//     const z2 = points[1].z
//     const x3 = points[2].x
//     const y3 = points[2].y
//     const z3 = points[2].z


// const numbers = [1, 2, 3, 4, 5]
    // console.log('nums:')
    // console.log(uniqueCombos(numbers, 3))



// const test = atomVectors.map((vector, index, array) => {
    //     const simplices = []
    //     atomVectors.forEach((atom, i) => {
    //         atomVectors.forEach((atom, k) => {
    //             if(index <= atomVectors.length-3 && i <= atomVectors.length-2 && k <= atomVectors.length-1) {
    //                 simplices.push([vector, atomVectors[i+1], atomVectors[i+2+k]])
    //             }
    //         })
    //     })

    //     return simplices
    // })

    // console.log(test)

// const boundary = alphaShape(1, atomPoints)
    // const boundaryVectors = boundary.map((point) => new Vector3(point[0], point[1], point[2]))
    // console.log('alpha shape:')
    // console.log(boundary)

    // const surfacePoints = new PointsCloudSystem('alpha shape', 3, scene)
    //     boundaryVectors.forEach((vector) => {
    //         surfacePoints.addPoints(1, (particle) => {
    //             particle.position = vector
    //         })
    //     })

    // surfacePoints.buildMeshAsync()


    // console.log('near points:')
    // console.log(nearPoints)

    // const lengths = nearPoints.filter((array) => array.length < 3)

    // console.log('lengths')
    // console.log(lengths)

    // const sphereWireframe = new StandardMaterial('material', scene)
            

    // const testPoints = [[1, 3, 1], [2, 1, 4], [1, 2, 3]].map((array) => new Vector3(array[0], array[1], array[2]))
    // const pointCloud = new PointsCloudSystem('test', 5, scene)
    //     testPoints.forEach((point) => pointCloud.addPoints(1, (particle) => {
    //         particle.position = point
    //     }))

    // pointCloud.buildMeshAsync()

    // MeshBuilder.CreateSphere('circumcenter', {segments: 4, diameter: 0.3}, scene).position = computeOrigin(testPoints)

    // const sphere = MeshBuilder.CreateSphere('sphere', {segments: 10, diameter: 5.9}, scene).position = computeOrigin(testPoints)
    // sphere.material = sphereWireframe
    // sphereWireframe.wireframe = true

    // console.log('circumradius')
    // console.log(circumradius)
    // console.log('radius')
    // console.log(radius)
    // console.log('lamda')
    // console.log(lamda)
    // console.log('normal')
    // console.log(planeNormal)
    // console.log('circumcenter')
    // console.log(circumcenter)
    // console.log('origin')
    // console.log(origin)


    // TEST
    // const testPoints = [[1, 3, 1], [2, 1, 4], [1, 2, 3]].map((array) => new Vector3(array[0], array[1], array[2]))
    // const pointCloud = new PointsCloudSystem('test', 5, scene)
    //     testPoints.forEach((point) => pointCloud.addPoints(1, (particle) => {
    //         particle.position = point
    //     }))

    // const zero = MeshBuilder.CreateSphere('circumcenter', {segments: 4, diameter: 0.3}, scene).position = new Vector3(0, 0, 0)

    // const circumcircle = Curve3.ArcThru3Points(testPoints[0], testPoints[1], testPoints[2], 100, false, true)
    // MeshBuilder.CreateLines('circumcircle', {points: circumcircle.getPoints()})

    // pointCloud.buildMeshAsync()

    // testPoints.forEach((point) => MeshBuilder.CreateSphere('point', {segments: 4, diameter: 0.3}, scene).position = point)

    // const circumcenter = computeCircumcenter(testPoints)
    // // const circumradius = new Vector3(Math.sqrt((computeCircumradius(testPoints)*computeCircumradius(testPoints))/3), Math.sqrt((computeCircumradius(testPoints)*computeCircumradius(testPoints))/3), Math.sqrt((computeCircumradius(testPoints)*computeCircumradius(testPoints))/3))

    // MeshBuilder.CreateSphere('circumcenter', {segments: 4, diameter: 0.3}, scene).position = circumcenter

    // // const sphere = MeshBuilder.CreateSphere('sphere', {segments: 10, diameter: 5.9}, scene).position = circumcenter
    // // const radius = MeshBuilder.CreateLines('radius', {points: [circumcenter, circumradius]}, scene)

    // const alpha = 5

    // const lamda = computeLamda(computeCircumradius(testPoints), testPoints, alpha)
    // MeshBuilder.CreateLines('lamda', {points: [circumcenter, circumcenter.add(lamda.scale(10))]})

    // const origin = computeOrigin(circumcenter, computeCircumradius(testPoints), testPoints, alpha)

    // const sphereMain = MeshBuilder.CreateSphere('origin', {segments: 10, diameter: 2*alpha}, scene)
    // sphereMain.position = origin
    // const sphereMaterial = new StandardMaterial('mat', scene)
    //             sphereMaterial.diffuseColor = new Color3(.5, .5, .7);
    //             sphereMaterial.specularColor = new Color3(1, 0.6, 0.87);
    //             sphereMaterial.emissiveColor = new Color3(1, 0, 0);
    //             sphereMaterial.ambientColor = new Color3(0.23, 0.98, 0.53);
    //             sphereMaterial.alpha = 0.4
    //             sphereMaterial.wireframe = true
    // sphereMain.material = sphereMaterial

    // const testVertex = new Vector3(3, 5, 7)
    // const testSphere = MeshBuilder.CreateSphere('test', {segments: 4, diameter: 0.3}).position = testVertex

    // // console.log('inside')
    // // console.log(checkInside(zero, origin, alpha))
    // // console.log('inside')
    // // console.log(checkInside(testVertex, origin, alpha))

    // console.log('test')
    // console.log(calulateAll(testPoints, testVertex, alpha))
    // console.log(calulateAll(testPoints, zero, alpha))


    // old delaunay

    const testPoints = [[1, 3, 1], [2, 1, 4], [1, 2, 3]].map((array) => new Vector3(array[0], array[1], array[2]))
    const pointCloud = new PointsCloudSystem('test', 5, scene)
        testPoints.forEach((point) => pointCloud.addPoints(1, (particle) => {
            particle.position = point
        }))

    const zero = MeshBuilder.CreateSphere('circumcenter', {segments: 4, diameter: 0.3}, scene).position = new Vector3(0, 0, 0)

    const circumcircle = Curve3.ArcThru3Points(testPoints[0], testPoints[1], testPoints[2], 100, false, true)
    MeshBuilder.CreateLines('circumcircle', {points: circumcircle.getPoints()})

    pointCloud.buildMeshAsync()

    testPoints.forEach((point) => MeshBuilder.CreateSphere('point', {segments: 4, diameter: 0.3}, scene).position = point)

    const circumcenter = computeCircumcenter(testPoints)
    
    MeshBuilder.CreateSphere('circumcenter', {segments: 4, diameter: 0.3}, scene).position = circumcenter

    const alpha = 5

    const lamda = computeLamda(computeCircumradius(testPoints), testPoints, alpha)
    MeshBuilder.CreateLines('lamda', {points: [circumcenter, circumcenter.add(lamda.scale(10))]})

    const originA = computeOrigin(circumcenter, computeCircumradius(testPoints), testPoints, alpha, true)
    const sphereA = MeshBuilder.CreateSphere('origin', {segments: 10, diameter: 2*alpha}, scene)
    sphereA.position = originA
    const sphereMaterial = new StandardMaterial('mat', scene)
                sphereMaterial.diffuseColor = new Color3(.5, .5, .7);
                sphereMaterial.specularColor = new Color3(1, 0.6, 0.87);
                sphereMaterial.emissiveColor = new Color3(1, 0, 0);
                sphereMaterial.ambientColor = new Color3(0.23, 0.98, 0.53);
                sphereMaterial.alpha = 0.4
                sphereMaterial.wireframe = true
    sphereA.material = sphereMaterial

    const originB = computeOrigin(circumcenter, computeCircumradius(testPoints), testPoints, alpha, false)
    const sphereB = MeshBuilder.CreateSphere('origin', {segments: 10, diameter: 2*alpha}, scene)
    sphereB.position = originB
    sphereB.material = sphereMaterial

    const testVertex = new Vector3(3, 5, 7)
    const testSphere = MeshBuilder.CreateSphere('test', {segments: 4, diameter: 0.3})
    testSphere.position = testVertex


    
function computeCircumcenter(points) {
    const A = points[0]
    const B = points[1]
    const C = points[2]

    const a = A.subtract(C)
    const b = B.subtract(C)
    const asq = a.lengthSquared()
    const bsq = b.lengthSquared()
    const abcross = a.cross(b)

    const p = ((b.scale(asq).subtract(a.scale(bsq))).cross(abcross)).scale(1/(abcross.lengthSquared()*2)).add(C)

    return p

}

function computeCircumradius(points) {
    const A = points[0]
    const B = points[1]
    const C = points[2]

    const a = A.subtract(C)
    const b = B.subtract(C)
    
    const r = (a.length()*b.length()*(a.subtract(b).length()))/(a.cross(b).length()*2)

    return r
}

function computeOrigin(circumcenter, circumradius, points, radius, direction) {
    const U = points[0].subtract(points[1])
    const W = points[0].subtract(points[2])
    const V = U.cross(W)
    const planeNormal = V.normalize()
    const lamda = Math.sqrt(radius*radius-circumradius*circumradius)
    if(direction === true) {
        const origin = circumcenter.add(planeNormal.scale(lamda))
        return origin
    } else {
        const origin = circumcenter.add(planeNormal.scale(-lamda))
        return origin
    }
}

function computeLamda(circumradius, points, radius) {
    const U = points[0].subtract(points[1])
    const W = points[0].subtract(points[2])
    const V = U.cross(W)
    const planeNormal = V.normalize()
    const lamda = Math.sqrt(radius*radius-circumradius*circumradius)

    
    return planeNormal
}

function checkInside(pointA, origin, radius) {
    const distanceToOrigin = pointA.subtract(origin).length()
    if(distanceToOrigin < radius) {
        return true
    } else return false
}

// function computeOrigin(circumcenter, circumradius, points, radius) {
//     const U = points[0].subtract(points[1])
//     const W = points[0].subtract(points[2])
//     const V = U.cross(W)
//     const planeNormal = V.normalize()
//     const lamda = Math.sqrt(radius*radius-circumradius*circumradius)
//     const originA = circumcenter.add(planeNormal.scale(lamda))
//     const originB = circumcenter.add(planeNormal.scale(-lamda))

//     return [originA, originB]
// }

// function checkInside(pointA, origin, radius) {
//     const distanceToOriginA = pointA.subtract(origin[0]).length()
//     const distanceToOriginB = pointA.subtract(origin[1]).length()
//     if(distanceToOriginA < radius && distanceToOriginB < radius) {
//         return true
//     } else return false
// }