{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Documents\\\\Code\\\\helix-app\\\\client\\\\src\\\\components\\\\views\\\\ViewDNA.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport XMLParser from 'react-xml-parser';\nimport InfoPanel from \"./InfoPanel\";\nimport LoadingGIF from \"./LoadingGIF\";\nimport SequenceRender from \"./SequenceRender\";\nimport SequenceHeader from \"./sequence-header/SequenceHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewDNA(_ref) {\n  _s();\n\n  let {\n    inputData,\n    annotationText,\n    setAnnotationText,\n    geneData,\n    setGeneData,\n    setSequenceID,\n    sequenceID,\n    reload,\n    setReload,\n    rerenderLibrary,\n    setRerenderLibrary\n  } = _ref;\n  const dnaContainerSize = 90;\n  const infoPanelLabels = {\n    type: 'Gene',\n    unit: 'bp',\n    info: ['Transcripts', geneData.transcripts.length]\n  };\n  const [visibility, setVisibility] = useState('hidden');\n  const [iconVisibility, setIconVisibility] = useState('visible');\n  const [showMoreButton, setShowMoreButton] = useState();\n  const [rawSequence, setRawSequence] = useState('');\n  const [sequenceArray, setSequenceArray] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState([0, 10000]);\n  const [sequenceStyle, setSequenceStyle] = useState(false);\n  const [basePairColors, setBasePairColors] = useState({\n    A: 'black',\n    T: 'black',\n    G: 'black',\n    C: 'black'\n  });\n  const [annotations, setAnnotations] = useState([]);\n  const [triggerAnnotation, setTriggerAnnotation] = useState(false);\n\n  function fetchSuccessful(data) {\n    if (data.genes[0].warnings) {\n      return false;\n    } else return true;\n  } // sequence config and gene data\n\n\n  useEffect(() => {\n    fetch('https://api.ncbi.nlm.nih.gov/datasets/v1/gene/symbol/' + inputData[0] + '/taxon/' + inputData[1]).then(resp => {\n      if (resp.ok) {\n        resp.json().then(data => {\n          if (fetchSuccessful(data)) {\n            if (true) {\n              // bug: click the same gene gets stuck in loading loop\n              const gene = data.genes[0].gene;\n              let strand;\n\n              if (gene.orientation === 'plus') {\n                strand = 1;\n              }\n\n              if (gene.orientation === 'minus') {\n                strand = 2;\n              }\n\n              setGeneData(gene);\n              setSequenceID({\n                accession: gene.genomic_ranges[0].accession_version,\n                range: [parseInt(gene.genomic_ranges[0].range[0].begin), parseInt(gene.genomic_ranges[0].range[0].end)],\n                strand: strand\n              });\n            } else {\n              setReload(!reload);\n            }\n          } else {\n            setReload(!reload);\n          }\n        });\n      }\n    }); // eslint-disable-next-line\n  }, [inputData]);\n  useEffect(() => {\n    fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=' + sequenceID.accession + '&strand=' + sequenceID.strand + '&seq_start=' + sequenceID.range[0] + '&seq_stop=' + sequenceID.range[1] + '&rettype=fasta&retmode=xml').then(resp => resp.text()).then(data => {\n      const respArray = new XMLParser().parseFromString(data).children[0].children[0].children;\n      const seq = new XMLParser().parseFromString(data).children[0].children[0].children[respArray.length - 1].value;\n      setRawSequence(seq);\n      setSequenceArray(seq.split(''));\n    });\n  }, [sequenceID]); // note: should migrate to a style specific component?\n\n  useEffect(() => {\n    switch (sequenceStyle) {\n      case false:\n        setBasePairColors({\n          A: 'black',\n          T: 'black',\n          G: 'black',\n          C: 'black'\n        });\n        break;\n\n      case true:\n        setBasePairColors({\n          A: 'blue',\n          T: 'yellow',\n          G: 'green',\n          C: 'red'\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [sequenceStyle]);\n  useEffect(() => {\n    console.log('geneData');\n    console.log(geneData);\n  }, [geneData]); // get annotations\n\n  useEffect(() => {\n    // note: need to configure for dna, rna, or protein\n    fetch('/annotations', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symbol: geneData.symbol\n      })\n    }).then(resp => {\n      if (resp.ok) {\n        resp.json().then(data => setAnnotations(data));\n      }\n    });\n  }, [geneData, triggerAnnotation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"workspace\",\n    style: {\n      height: 'fit-content',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      backgroundColor: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SequenceHeader, {\n      geneData: geneData,\n      setSelectedRegion: setSelectedRegion,\n      selectedRegion: selectedRegion,\n      setReload: setReload,\n      annotations: annotations,\n      setAnnotationText: setAnnotationText,\n      setTriggerAnnotation: setTriggerAnnotation,\n      triggerAnnotation: triggerAnnotation,\n      sequenceStyle: sequenceStyle,\n      setSequenceStyle: setSequenceStyle,\n      rerenderLibrary: rerenderLibrary,\n      setRerenderLibrary: setRerenderLibrary,\n      rawSequence: rawSequence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SequenceRender, {\n      sequenceArray: sequenceArray,\n      setIconVisibility: setIconVisibility,\n      setVisibility: setVisibility,\n      visibility: visibility,\n      basePairColors: basePairColors,\n      selectedRegion: selectedRegion,\n      setShowMoreButton: setShowMoreButton,\n      setSelectedRegion: setSelectedRegion,\n      reload: reload,\n      annotationText: annotationText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoadingGIF, {\n      iconVisibility: iconVisibility,\n      dnaContainerSize: dnaContainerSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), showMoreButton, /*#__PURE__*/_jsxDEV(InfoPanel, {\n      geneData: geneData,\n      sequenceArray: sequenceArray,\n      infoPanelLabels: infoPanelLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewDNA, \"S6c/rIjdOobWu3oiMyps2pkd7ko=\");\n\n_c = ViewDNA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewDNA\");","map":{"version":3,"names":["useState","useEffect","XMLParser","InfoPanel","LoadingGIF","SequenceRender","SequenceHeader","ViewDNA","inputData","annotationText","setAnnotationText","geneData","setGeneData","setSequenceID","sequenceID","reload","setReload","rerenderLibrary","setRerenderLibrary","dnaContainerSize","infoPanelLabels","type","unit","info","transcripts","length","visibility","setVisibility","iconVisibility","setIconVisibility","showMoreButton","setShowMoreButton","rawSequence","setRawSequence","sequenceArray","setSequenceArray","selectedRegion","setSelectedRegion","sequenceStyle","setSequenceStyle","basePairColors","setBasePairColors","A","T","G","C","annotations","setAnnotations","triggerAnnotation","setTriggerAnnotation","fetchSuccessful","data","genes","warnings","fetch","then","resp","ok","json","gene","strand","orientation","accession","genomic_ranges","accession_version","range","parseInt","begin","end","text","respArray","parseFromString","children","seq","value","split","console","log","method","credentials","headers","body","JSON","stringify","symbol","height","width","display","flexDirection","alignItems","backgroundColor"],"sources":["C:/Users/micha/OneDrive/Documents/Code/helix-app/client/src/components/views/ViewDNA.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport XMLParser from 'react-xml-parser'\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport LoadingGIF from \"./LoadingGIF\"\r\nimport SequenceRender from \"./SequenceRender\"\r\nimport SequenceHeader from \"./sequence-header/SequenceHeader\"\r\n\r\n\r\nexport default function ViewDNA ( { inputData, annotationText, setAnnotationText, geneData, setGeneData, setSequenceID, sequenceID, reload, setReload, rerenderLibrary, setRerenderLibrary } ) {\r\n\r\n    const dnaContainerSize = 90\r\n    const infoPanelLabels = {type: 'Gene', unit: 'bp', info: ['Transcripts', geneData.transcripts.length]}\r\n\r\n    const [visibility, setVisibility] = useState('hidden')\r\n    const [iconVisibility, setIconVisibility] = useState('visible')\r\n    const [showMoreButton, setShowMoreButton] = useState()\r\n\r\n    const [rawSequence, setRawSequence] = useState('')\r\n    const [sequenceArray, setSequenceArray] = useState([])\r\n    const [selectedRegion, setSelectedRegion] = useState([0, 10000])\r\n \r\n    const [sequenceStyle, setSequenceStyle] = useState(false)\r\n    const [basePairColors, setBasePairColors] = useState({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n\r\n    const [annotations, setAnnotations] = useState([])\r\n    const [triggerAnnotation, setTriggerAnnotation] = useState(false)\r\n\r\n\r\n    function fetchSuccessful (data) {\r\n        if (data.genes[0].warnings) {\r\n            return false\r\n        } else return true\r\n    }\r\n\r\n\r\n    // sequence config and gene data\r\n    useEffect(() => {\r\n            fetch('https://api.ncbi.nlm.nih.gov/datasets/v1/gene/symbol/' + inputData[0] + '/taxon/' + inputData[1])\r\n            .then((resp) => {\r\n                if(resp.ok) {\r\n                resp.json().then(data => {\r\n                                    if(fetchSuccessful(data)) {\r\n                                        if(true) { // bug: click the same gene gets stuck in loading loop\r\n                                            const gene = data.genes[0].gene\r\n                                            let strand\r\n                                            if(gene.orientation === 'plus') {\r\n                                                strand = 1\r\n                                            }\r\n                                            if(gene.orientation === 'minus') {\r\n                                                strand = 2\r\n                                            }\r\n                                            setGeneData(gene)\r\n                                            setSequenceID({ accession: gene.genomic_ranges[0].accession_version, range: [parseInt(gene.genomic_ranges[0].range[0].begin), parseInt(gene.genomic_ranges[0].range[0].end)], strand: strand})\r\n                                        } else {\r\n                                            setReload(!reload) }\r\n                                    } else {\r\n                                        setReload(!reload)\r\n                                    }})\r\n                }})\r\n    // eslint-disable-next-line\r\n    }, [inputData])\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=' + sequenceID.accession + '&strand=' + sequenceID.strand + '&seq_start=' + sequenceID.range[0] + '&seq_stop=' + sequenceID.range[1] + '&rettype=fasta&retmode=xml')\r\n        .then(resp => resp.text())\r\n        .then(data => {\r\n                        const respArray = new XMLParser().parseFromString(data).children[0].children[0].children\r\n                        const seq = new XMLParser().parseFromString(data).children[0].children[0].children[respArray.length-1].value\r\n                        setRawSequence(seq)\r\n                        setSequenceArray(seq.split(''))\r\n                    })\r\n    }, [sequenceID])\r\n\r\n\r\n    // note: should migrate to a style specific component?\r\n    useEffect(() => {\r\n        switch (sequenceStyle) {\r\n            case false:\r\n                setBasePairColors({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n                break;\r\n\r\n            case true:\r\n                setBasePairColors({A: 'blue', T: 'yellow', G: 'green', C: 'red'})\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [sequenceStyle])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('geneData')\r\n        console.log(geneData)\r\n    }, [geneData])\r\n\r\n\r\n\r\n    // get annotations\r\n    useEffect(() => { // note: need to configure for dna, rna, or protein\r\n        fetch('/annotations', {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ symbol: geneData.symbol })\r\n            })\r\n            .then(resp => {\r\n                if(resp.ok) {\r\n                    resp.json().then(data => setAnnotations(data))\r\n                }})\r\n    }, [geneData, triggerAnnotation])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"workspace\" style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', backgroundColor: 'white' }}>\r\n            <SequenceHeader geneData={geneData} setSelectedRegion={setSelectedRegion} selectedRegion={selectedRegion} setReload={setReload} annotations={annotations} setAnnotationText={setAnnotationText} setTriggerAnnotation={setTriggerAnnotation} triggerAnnotation={triggerAnnotation} sequenceStyle={sequenceStyle} setSequenceStyle={setSequenceStyle} rerenderLibrary={rerenderLibrary} setRerenderLibrary={setRerenderLibrary} rawSequence={rawSequence} />\r\n            <SequenceRender sequenceArray={sequenceArray} setIconVisibility={setIconVisibility} setVisibility={setVisibility} visibility={visibility} basePairColors={basePairColors} selectedRegion={selectedRegion} setShowMoreButton={setShowMoreButton} setSelectedRegion={setSelectedRegion} reload={reload} annotationText={annotationText}/>\r\n            <LoadingGIF iconVisibility={iconVisibility} dnaContainerSize={dnaContainerSize}/>\r\n            {showMoreButton}\r\n            <InfoPanel geneData={geneData} sequenceArray={sequenceArray} infoPanelLabels={infoPanelLabels}/>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}