{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Documents\\\\Code\\\\helix-app\\\\client\\\\src\\\\components\\\\views\\\\ViewRNA.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport XMLParser from 'react-xml-parser';\nimport SequenceRender from \"./SequenceRender\";\nimport InfoPanel from \"./InfoPanel\";\nimport LoadingGIF from \"./LoadingGIF\";\nimport SequenceHeader from \"./sequence-header/SequenceHeader\";\nimport Annotation from \"./Annotation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewRNA(_ref) {\n  _s();\n\n  let {\n    geneData,\n    annotationText,\n    setAnnotationText,\n    sequenceID,\n    transcriptIndex,\n    reload,\n    rerenderLibrary,\n    setRerenderLibrary\n  } = _ref;\n  const dnaContainerSize = 90;\n  const infoPanelLabels = {\n    type: 'mRNA',\n    unit: 'bp',\n    info: ['Transcript', parseInt(transcriptIndex) + 1]\n  };\n  const [visibility, setVisibility] = useState('hidden');\n  const [iconVisibility, setIconVisibility] = useState('visible');\n  const [showMoreButton, setShowMoreButton] = useState();\n  const [rawSequence, setRawSequence] = useState('');\n  const [sequenceArray, setSequenceArray] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState([0, 10000]);\n  const [sequenceStyle, setSequenceStyle] = useState(false);\n  const [basePairColors, setBasePairColors] = useState({\n    A: 'black',\n    T: 'black',\n    G: 'black',\n    C: 'black'\n  });\n  const [annotationSequence, setAnnotationSequence] = useState([]);\n  const [isAnnotating, setIsAnnotating] = useState(false);\n  const [triggerHighlight, setTriggerHighlight] = useState(false);\n  const [triggerAnnotation, setTriggerAnnotation] = useState(false);\n  const [annotationToggle, setAnnotationToggle] = useState(false);\n  const [annotations, setAnnotations] = useState([]);\n  useEffect(() => {\n    fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&id=' + sequenceID + '&rettype=FASTA&retmode=xml').then(resp => resp.text()).then(data => {\n      const seq = new XMLParser().parseFromString(data).children[0].children[0].children[6].value;\n      setRawSequence(seq);\n      setSequenceArray(seq.split(''));\n    });\n  }, [sequenceID]); // note: should migrate to a style specific component\n\n  useEffect(() => {\n    switch (sequenceStyle) {\n      case false:\n        setBasePairColors({\n          A: 'black',\n          T: 'black',\n          G: 'black',\n          C: 'black'\n        });\n        break;\n\n      case true:\n        setBasePairColors({\n          A: 'blue',\n          T: 'yellow',\n          G: 'green',\n          C: 'red'\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [sequenceStyle]); // the following functionality can be moved to a consise location\n  // custom annotation handling\n\n  function handleAddAnnotation() {\n    setIsAnnotating(!isAnnotating);\n  }\n\n  useEffect(() => {\n    if (isAnnotating === true) {\n      document.addEventListener('mousedown', handleStartDrag, {\n        once: true\n      });\n      document.addEventListener('mouseup', handleDragEnd, {\n        once: true\n      });\n    } // eslint-disable-next-line\n\n  }, [isAnnotating, triggerHighlight]);\n  const highlightedBp = [];\n\n  function handleStartDrag(event) {\n    highlightedBp.splice(0, highlightedBp.length);\n\n    if (event.target.className === 'bp') {\n      document.getElementById(event.target.id).style.backgroundColor = 'yellow';\n      highlightedBp.push(event.target.id);\n      document.addEventListener('mouseover', handleWhileDragging);\n    }\n  }\n\n  function handleWhileDragging(event) {\n    const basepair = event.target.id;\n\n    if (event.target.className === 'bp') {\n      if (parseInt(basepair) === parseInt(Math.max(...highlightedBp) + 1) || parseInt(basepair) === parseInt(Math.min(...highlightedBp) - 1)) {\n        document.getElementById(event.target.id).style.backgroundColor = 'yellow';\n        highlightedBp.push(event.target.id);\n      }\n    }\n  }\n\n  function handleDragEnd() {\n    const bpLowToHigh = highlightedBp.sort((a, b) => a - b);\n    setAnnotationSequence(bpLowToHigh);\n    document.removeEventListener('mouseover', handleWhileDragging);\n  }\n\n  useEffect(() => {\n    if (annotationSequence.length > 1) {\n      setAnnotationText( /*#__PURE__*/_jsxDEV(Annotation, {\n        basepairs: annotationSequence,\n        transcriptIndex: transcriptIndex,\n        isProtein: false,\n        annotationToggle: annotationToggle,\n        triggerAnnotation: triggerAnnotation,\n        setTriggerAnnotation: setTriggerAnnotation,\n        setAnnotationText: setAnnotationText,\n        setTriggerHighlight: setTriggerHighlight,\n        triggerHighlight: triggerHighlight,\n        geneData: geneData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 31\n      }, this));\n    } // eslint-disable-next-line\n\n  }, [annotationSequence]); // end\n  // get annotations\n\n  useEffect(() => {\n    // note: need to configure for dna, rna, or protein\n    fetch('/annotations', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symbol: geneData.symbol\n      })\n    }).then(resp => resp.json()).then(data => setAnnotations(data));\n  }, [geneData, triggerAnnotation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"workspace\",\n    style: {\n      height: 'fit-content',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      backgroundColor: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SequenceHeader, {\n      geneData: geneData,\n      annotations: annotations,\n      annotationToggle: annotationToggle,\n      setAnnotationToggle: setAnnotationToggle,\n      handleAddAnnotation: handleAddAnnotation,\n      setAnnotationText: setAnnotationText,\n      triggerAnnotation: triggerAnnotation,\n      sequenceStyle: sequenceStyle,\n      setSequenceStyle: setSequenceStyle,\n      rerenderLibrary: rerenderLibrary,\n      setRerenderLibrary: setRerenderLibrary,\n      rawSequence: rawSequence,\n      isAnnotating: isAnnotating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SequenceRender, {\n      sequenceArray: sequenceArray,\n      annotationText: annotationText,\n      setIconVisibility: setIconVisibility,\n      setVisibility: setVisibility,\n      visibility: visibility,\n      basePairColors: basePairColors,\n      selectedRegion: selectedRegion,\n      setShowMoreButton: setShowMoreButton,\n      setSelectedRegion: setSelectedRegion,\n      reload: reload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoadingGIF, {\n      iconVisibility: iconVisibility,\n      dnaContainerSize: dnaContainerSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), showMoreButton, /*#__PURE__*/_jsxDEV(InfoPanel, {\n      geneData: geneData,\n      sequenceArray: sequenceArray,\n      infoPanelLabels: infoPanelLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewRNA, \"sN254g/gb0VJgUgKYVHRQkedG1Y=\");\n\n_c = ViewRNA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewRNA\");","map":{"version":3,"names":["useState","useEffect","XMLParser","SequenceRender","InfoPanel","LoadingGIF","SequenceHeader","Annotation","ViewRNA","geneData","annotationText","setAnnotationText","sequenceID","transcriptIndex","reload","rerenderLibrary","setRerenderLibrary","dnaContainerSize","infoPanelLabels","type","unit","info","parseInt","visibility","setVisibility","iconVisibility","setIconVisibility","showMoreButton","setShowMoreButton","rawSequence","setRawSequence","sequenceArray","setSequenceArray","selectedRegion","setSelectedRegion","sequenceStyle","setSequenceStyle","basePairColors","setBasePairColors","A","T","G","C","annotationSequence","setAnnotationSequence","isAnnotating","setIsAnnotating","triggerHighlight","setTriggerHighlight","triggerAnnotation","setTriggerAnnotation","annotationToggle","setAnnotationToggle","annotations","setAnnotations","fetch","then","resp","text","data","seq","parseFromString","children","value","split","handleAddAnnotation","document","addEventListener","handleStartDrag","once","handleDragEnd","highlightedBp","event","splice","length","target","className","getElementById","id","style","backgroundColor","push","handleWhileDragging","basepair","Math","max","min","bpLowToHigh","sort","a","b","removeEventListener","method","credentials","headers","body","JSON","stringify","symbol","json","height","width","display","flexDirection","alignItems"],"sources":["C:/Users/micha/OneDrive/Documents/Code/helix-app/client/src/components/views/ViewRNA.jsx"],"sourcesContent":["import { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport XMLParser from 'react-xml-parser'\r\nimport SequenceRender from \"./SequenceRender\"\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport LoadingGIF from \"./LoadingGIF\"\r\nimport SequenceHeader from \"./sequence-header/SequenceHeader\"\r\nimport Annotation from \"./Annotation\"\r\n\r\nexport default function ViewRNA ( { geneData, annotationText, setAnnotationText, sequenceID, transcriptIndex, reload, rerenderLibrary, setRerenderLibrary } ) {\r\n\r\n    const dnaContainerSize = 90\r\n    const infoPanelLabels = {type: 'mRNA', unit: 'bp', info: ['Transcript', parseInt(transcriptIndex)+1]}\r\n\r\n    const [visibility, setVisibility] = useState('hidden')\r\n    const [iconVisibility, setIconVisibility] = useState('visible')\r\n    const [showMoreButton, setShowMoreButton] = useState()\r\n\r\n    const [rawSequence, setRawSequence] = useState('')\r\n    const [sequenceArray, setSequenceArray] = useState([])\r\n    const [selectedRegion, setSelectedRegion] = useState([0, 10000])\r\n \r\n    const [sequenceStyle, setSequenceStyle] = useState(false)\r\n    const [basePairColors, setBasePairColors] = useState({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n\r\n    const [annotationSequence, setAnnotationSequence] = useState([])\r\n    const [isAnnotating, setIsAnnotating] = useState(false)\r\n    const [triggerHighlight, setTriggerHighlight] = useState(false)\r\n    const [triggerAnnotation, setTriggerAnnotation] = useState(false)\r\n    const [annotationToggle, setAnnotationToggle] = useState(false)\r\n    const [annotations, setAnnotations] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&id=' + sequenceID + '&rettype=FASTA&retmode=xml')\r\n        .then(resp => resp.text())\r\n        .then(data => { const seq = new XMLParser().parseFromString(data).children[0].children[0].children[6].value\r\n                        setRawSequence(seq)\r\n                        setSequenceArray(seq.split(''))\r\n        })\r\n    }, [sequenceID])\r\n\r\n\r\n    // note: should migrate to a style specific component\r\n\r\n    useEffect(() => {\r\n        switch (sequenceStyle) {\r\n            case false:\r\n                setBasePairColors({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n                break;\r\n\r\n            case true:\r\n                setBasePairColors({A: 'blue', T: 'yellow', G: 'green', C: 'red'})\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [sequenceStyle])\r\n\r\n\r\n    // the following functionality can be moved to a consise location\r\n\r\n    // custom annotation handling\r\n    function handleAddAnnotation() {\r\n        setIsAnnotating(!isAnnotating)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAnnotating === true) {\r\n            document.addEventListener('mousedown', handleStartDrag, {once: true})\r\n            document.addEventListener('mouseup', handleDragEnd, {once: true})\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isAnnotating, triggerHighlight])\r\n\r\n    const highlightedBp = []\r\n\r\n    function handleStartDrag(event) {\r\n        highlightedBp.splice(0, highlightedBp.length)\r\n        if(event.target.className === 'bp') {\r\n            document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n            highlightedBp.push(event.target.id)\r\n            document.addEventListener('mouseover', handleWhileDragging)\r\n        }\r\n    }\r\n\r\n    function handleWhileDragging(event) {\r\n        const basepair = event.target.id\r\n        if(event.target.className === 'bp') {\r\n            if(parseInt(basepair) === parseInt(Math.max(...highlightedBp)+1) || parseInt(basepair) ===  parseInt(Math.min(...highlightedBp)-1)) {\r\n                document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n                highlightedBp.push(event.target.id)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleDragEnd() {\r\n        const bpLowToHigh = highlightedBp.sort((a, b) => a - b)\r\n        setAnnotationSequence(bpLowToHigh)\r\n        document.removeEventListener('mouseover', handleWhileDragging)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(annotationSequence.length > 1) {\r\n            setAnnotationText(<Annotation basepairs={annotationSequence} transcriptIndex={transcriptIndex} isProtein={false} annotationToggle={annotationToggle} triggerAnnotation={triggerAnnotation} setTriggerAnnotation={setTriggerAnnotation} setAnnotationText={setAnnotationText} setTriggerHighlight={setTriggerHighlight} triggerHighlight={triggerHighlight} geneData={geneData}/>)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [annotationSequence])\r\n\r\n    // end\r\n\r\n    // get annotations\r\n    useEffect(() => { // note: need to configure for dna, rna, or protein\r\n        fetch('/annotations', {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ symbol: geneData.symbol })\r\n            })\r\n            .then(resp => resp.json())\r\n            .then(data => setAnnotations(data))\r\n    }, [geneData, triggerAnnotation])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"workspace\" style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', backgroundColor: 'white' }}>\r\n            <SequenceHeader geneData={geneData} annotations={annotations} annotationToggle={annotationToggle} setAnnotationToggle={setAnnotationToggle} handleAddAnnotation={handleAddAnnotation} setAnnotationText={setAnnotationText} triggerAnnotation={triggerAnnotation} sequenceStyle={sequenceStyle} setSequenceStyle={setSequenceStyle} rerenderLibrary={rerenderLibrary} setRerenderLibrary={setRerenderLibrary} rawSequence={rawSequence} isAnnotating={isAnnotating}/>\r\n            <SequenceRender sequenceArray={sequenceArray} annotationText={annotationText} setIconVisibility={setIconVisibility} setVisibility={setVisibility} visibility={visibility} basePairColors={basePairColors} selectedRegion={selectedRegion} setShowMoreButton={setShowMoreButton} setSelectedRegion={setSelectedRegion} reload={reload}/>\r\n            <LoadingGIF iconVisibility={iconVisibility} dnaContainerSize={dnaContainerSize}/>\r\n            {showMoreButton}\r\n            <InfoPanel geneData={geneData} sequenceArray={sequenceArray} infoPanelLabels={infoPanelLabels}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}