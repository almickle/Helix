{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Documents\\\\Code\\\\helix-app\\\\client\\\\src\\\\components\\\\views\\\\ViewDNA.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport XMLParser from 'react-xml-parser';\nimport InfoPanel from \"./InfoPanel\";\nimport LoadingGIF from \"./LoadingGIF\";\nimport SequenceRender from \"./SequenceRender\";\nimport SequenceHeader from \"./sequence-header/SequenceHeader\";\nimport Annotation from \"./Annotation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewDNA(_ref) {\n  _s();\n\n  let {\n    inputData,\n    annotationText,\n    setAnnotationText,\n    geneData,\n    setGeneData,\n    setSequenceID,\n    sequenceID,\n    reload,\n    setReload,\n    rerenderLibrary,\n    setRerenderLibrary\n  } = _ref;\n  const dnaContainerSize = 90;\n  const infoPanelLabels = {\n    type: 'Gene',\n    unit: 'bp',\n    info: ['Transcripts', geneData.transcripts.length]\n  };\n  const [visibility, setVisibility] = useState('hidden');\n  const [iconVisibility, setIconVisibility] = useState('visible');\n  const [showMoreButton, setShowMoreButton] = useState();\n  const [rawSequence, setRawSequence] = useState('');\n  const [sequenceArray, setSequenceArray] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState([0, 10000]);\n  const [sequenceStyle, setSequenceStyle] = useState(false);\n  const [basePairColors, setBasePairColors] = useState({\n    A: 'black',\n    T: 'black',\n    G: 'black',\n    C: 'black'\n  });\n  const [annotationSequence, setAnnotationSequence] = useState([]);\n  const [isAnnotating, setIsAnnotating] = useState(false);\n  const [triggerHighlight, setTriggerHighlight] = useState(false);\n  const [triggerAnnotation, setTriggerAnnotation] = useState(false);\n  const [annotationToggle, setAnnotationToggle] = useState(false);\n  const [annotations, setAnnotations] = useState([]);\n\n  function fetchSuccessful(data) {\n    if (data.genes[0].warnings) {\n      return false;\n    } else return true;\n  } // sequence config and gene data\n\n\n  useEffect(() => {\n    fetch('https://api.ncbi.nlm.nih.gov/datasets/v1/gene/symbol/' + inputData[0] + '/taxon/' + inputData[1]).then(resp => {\n      if (resp.ok) {\n        resp.json().then(data => {\n          if (fetchSuccessful(data)) {\n            if (true) {\n              // bug: click the same gene gets stuck in loading loop\n              const gene = data.genes[0].gene;\n              let strand;\n\n              if (gene.orientation === 'plus') {\n                strand = 1;\n              }\n\n              if (gene.orientation === 'minus') {\n                strand = 2;\n              }\n\n              setGeneData(gene);\n              setSequenceID({\n                accession: gene.genomic_ranges[0].accession_version,\n                range: [parseInt(gene.genomic_ranges[0].range[0].begin), parseInt(gene.genomic_ranges[0].range[0].end)],\n                strand: strand\n              });\n            } else {\n              setReload(!reload);\n            }\n          } else {\n            setReload(!reload);\n          }\n        });\n      }\n    }); // eslint-disable-next-line\n  }, [inputData]);\n  useEffect(() => {\n    fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=' + sequenceID.accession + '&strand=' + sequenceID.strand + '&seq_start=' + sequenceID.range[0] + '&seq_stop=' + sequenceID.range[1] + '&rettype=fasta&retmode=xml').then(resp => resp.text()).then(data => {\n      const respArray = new XMLParser().parseFromString(data).children[0].children[0].children;\n      const seq = new XMLParser().parseFromString(data).children[0].children[0].children[respArray.length - 1].value;\n      setRawSequence(seq);\n      setSequenceArray(seq.split(''));\n    });\n  }, [sequenceID]); // note: should migrate to a style specific component\n\n  useEffect(() => {\n    switch (sequenceStyle) {\n      case false:\n        setBasePairColors({\n          A: 'black',\n          T: 'black',\n          G: 'black',\n          C: 'black'\n        });\n        break;\n\n      case true:\n        setBasePairColors({\n          A: 'blue',\n          T: 'yellow',\n          G: 'green',\n          C: 'red'\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [sequenceStyle]);\n  useEffect(() => {\n    console.log('geneData');\n    console.log(geneData);\n  }, [geneData]); // the following functionality can be moved to a consise location\n  // custom annotation handling\n\n  function handleAddAnnotation() {\n    setIsAnnotating(!isAnnotating);\n  }\n\n  useEffect(() => {\n    if (isAnnotating === true) {\n      document.addEventListener('mousedown', handleStartDrag, {\n        once: true\n      });\n      document.addEventListener('mouseup', handleDragEnd, {\n        once: true\n      });\n    } // eslint-disable-next-line\n\n  }, [isAnnotating, triggerHighlight]);\n  const highlightedBp = [];\n\n  function handleStartDrag(event) {\n    highlightedBp.splice(0, highlightedBp.length);\n\n    if (event.target.className === 'bp') {\n      document.getElementById(event.target.id).style.backgroundColor = 'yellow';\n      highlightedBp.push(event.target.id);\n      document.addEventListener('mouseover', handleWhileDragging);\n    }\n  }\n\n  function handleWhileDragging(event) {\n    const basepair = event.target.id;\n\n    if (event.target.className === 'bp') {\n      if (parseInt(basepair) === parseInt(Math.max(...highlightedBp) + 1) || parseInt(basepair) === parseInt(Math.min(...highlightedBp) - 1)) {\n        document.getElementById(event.target.id).style.backgroundColor = 'yellow';\n        highlightedBp.push(event.target.id);\n      }\n    }\n  }\n\n  function handleDragEnd() {\n    const bpLowToHigh = highlightedBp.sort((a, b) => a - b);\n    setAnnotationSequence(bpLowToHigh);\n    document.removeEventListener('mouseover', handleWhileDragging);\n  }\n\n  useEffect(() => {\n    if (annotationSequence.length > 1) {\n      setAnnotationText( /*#__PURE__*/_jsxDEV(Annotation, {\n        basepairs: annotationSequence,\n        transcriptIndex: -1,\n        isProtein: false,\n        annotationToggle: annotationToggle,\n        triggerAnnotation: triggerAnnotation,\n        setTriggerAnnotation: setTriggerAnnotation,\n        setAnnotationText: setAnnotationText,\n        setTriggerHighlight: setTriggerHighlight,\n        triggerHighlight: triggerHighlight,\n        geneData: geneData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 31\n      }, this));\n    } // eslint-disable-next-line\n\n  }, [annotationSequence]); // end\n  // get annotations\n\n  useEffect(() => {\n    // note: need to configure for dna, rna, or protein\n    fetch('/annotations', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symbol: geneData.symbol\n      })\n    }).then(resp => resp.json()).then(data => setAnnotations(data));\n  }, [geneData, triggerAnnotation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"workspace\",\n    style: {\n      height: 'fit-content',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      backgroundColor: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SequenceHeader, {\n      geneData: geneData,\n      annotations: annotations,\n      annotationToggle: annotationToggle,\n      setAnnotationToggle: setAnnotationToggle,\n      handleAddAnnotation: handleAddAnnotation,\n      setAnnotationText: setAnnotationText,\n      triggerAnnotation: triggerAnnotation,\n      sequenceStyle: sequenceStyle,\n      setSequenceStyle: setSequenceStyle,\n      rerenderLibrary: rerenderLibrary,\n      setRerenderLibrary: setRerenderLibrary,\n      rawSequence: rawSequence,\n      isAnnotating: isAnnotating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SequenceRender, {\n      sequenceArray: sequenceArray,\n      setIconVisibility: setIconVisibility,\n      setVisibility: setVisibility,\n      visibility: visibility,\n      basePairColors: basePairColors,\n      selectedRegion: selectedRegion,\n      setShowMoreButton: setShowMoreButton,\n      setSelectedRegion: setSelectedRegion,\n      reload: reload,\n      annotationText: annotationText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoadingGIF, {\n      iconVisibility: iconVisibility,\n      dnaContainerSize: dnaContainerSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), showMoreButton, /*#__PURE__*/_jsxDEV(InfoPanel, {\n      geneData: geneData,\n      sequenceArray: sequenceArray,\n      infoPanelLabels: infoPanelLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewDNA, \"4SRgVMa4PLh3xWfnm3Gn9Qf4UsM=\");\n\n_c = ViewDNA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewDNA\");","map":{"version":3,"names":["useState","useEffect","XMLParser","InfoPanel","LoadingGIF","SequenceRender","SequenceHeader","Annotation","ViewDNA","inputData","annotationText","setAnnotationText","geneData","setGeneData","setSequenceID","sequenceID","reload","setReload","rerenderLibrary","setRerenderLibrary","dnaContainerSize","infoPanelLabels","type","unit","info","transcripts","length","visibility","setVisibility","iconVisibility","setIconVisibility","showMoreButton","setShowMoreButton","rawSequence","setRawSequence","sequenceArray","setSequenceArray","selectedRegion","setSelectedRegion","sequenceStyle","setSequenceStyle","basePairColors","setBasePairColors","A","T","G","C","annotationSequence","setAnnotationSequence","isAnnotating","setIsAnnotating","triggerHighlight","setTriggerHighlight","triggerAnnotation","setTriggerAnnotation","annotationToggle","setAnnotationToggle","annotations","setAnnotations","fetchSuccessful","data","genes","warnings","fetch","then","resp","ok","json","gene","strand","orientation","accession","genomic_ranges","accession_version","range","parseInt","begin","end","text","respArray","parseFromString","children","seq","value","split","console","log","handleAddAnnotation","document","addEventListener","handleStartDrag","once","handleDragEnd","highlightedBp","event","splice","target","className","getElementById","id","style","backgroundColor","push","handleWhileDragging","basepair","Math","max","min","bpLowToHigh","sort","a","b","removeEventListener","method","credentials","headers","body","JSON","stringify","symbol","height","width","display","flexDirection","alignItems"],"sources":["C:/Users/micha/OneDrive/Documents/Code/helix-app/client/src/components/views/ViewDNA.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport XMLParser from 'react-xml-parser'\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport LoadingGIF from \"./LoadingGIF\"\r\nimport SequenceRender from \"./SequenceRender\"\r\nimport SequenceHeader from \"./sequence-header/SequenceHeader\"\r\nimport Annotation from \"./Annotation\"\r\n\r\nexport default function ViewDNA ( { inputData, annotationText, setAnnotationText, geneData, setGeneData, setSequenceID, sequenceID, reload, setReload, rerenderLibrary, setRerenderLibrary } ) {\r\n\r\n    const dnaContainerSize = 90\r\n    const infoPanelLabels = {type: 'Gene', unit: 'bp', info: ['Transcripts', geneData.transcripts.length]}\r\n\r\n    const [visibility, setVisibility] = useState('hidden')\r\n    const [iconVisibility, setIconVisibility] = useState('visible')\r\n    const [showMoreButton, setShowMoreButton] = useState()\r\n\r\n    const [rawSequence, setRawSequence] = useState('')\r\n    const [sequenceArray, setSequenceArray] = useState([])\r\n    const [selectedRegion, setSelectedRegion] = useState([0, 10000])\r\n \r\n    const [sequenceStyle, setSequenceStyle] = useState(false)\r\n    const [basePairColors, setBasePairColors] = useState({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n\r\n    const [annotationSequence, setAnnotationSequence] = useState([])\r\n    const [isAnnotating, setIsAnnotating] = useState(false)\r\n    const [triggerHighlight, setTriggerHighlight] = useState(false)\r\n    const [triggerAnnotation, setTriggerAnnotation] = useState(false)\r\n    const [annotationToggle, setAnnotationToggle] = useState(false)\r\n    const [annotations, setAnnotations] = useState([])\r\n\r\n\r\n    function fetchSuccessful (data) {\r\n        if (data.genes[0].warnings) {\r\n            return false\r\n        } else return true\r\n    }\r\n\r\n\r\n    // sequence config and gene data\r\n    useEffect(() => {\r\n            fetch('https://api.ncbi.nlm.nih.gov/datasets/v1/gene/symbol/' + inputData[0] + '/taxon/' + inputData[1])\r\n            .then((resp) => {\r\n                if(resp.ok) {\r\n                resp.json().then(data => {\r\n                                    if(fetchSuccessful(data)) {\r\n                                        if(true) { // bug: click the same gene gets stuck in loading loop\r\n                                            const gene = data.genes[0].gene\r\n                                            let strand\r\n                                            if(gene.orientation === 'plus') {\r\n                                                strand = 1\r\n                                            }\r\n                                            if(gene.orientation === 'minus') {\r\n                                                strand = 2\r\n                                            }\r\n                                            setGeneData(gene)\r\n                                            setSequenceID({ accession: gene.genomic_ranges[0].accession_version, range: [parseInt(gene.genomic_ranges[0].range[0].begin), parseInt(gene.genomic_ranges[0].range[0].end)], strand: strand})\r\n                                        } else {\r\n                                            setReload(!reload) }\r\n                                    } else {\r\n                                        setReload(!reload)\r\n                                    }})\r\n                }})\r\n    // eslint-disable-next-line\r\n    }, [inputData])\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=' + sequenceID.accession + '&strand=' + sequenceID.strand + '&seq_start=' + sequenceID.range[0] + '&seq_stop=' + sequenceID.range[1] + '&rettype=fasta&retmode=xml')\r\n        .then(resp => resp.text())\r\n        .then(data => {\r\n                        const respArray = new XMLParser().parseFromString(data).children[0].children[0].children\r\n                        const seq = new XMLParser().parseFromString(data).children[0].children[0].children[respArray.length-1].value\r\n                        setRawSequence(seq)\r\n                        setSequenceArray(seq.split(''))\r\n                    })\r\n    }, [sequenceID])\r\n\r\n\r\n    // note: should migrate to a style specific component\r\n    useEffect(() => {\r\n        switch (sequenceStyle) {\r\n            case false:\r\n                setBasePairColors({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n                break;\r\n\r\n            case true:\r\n                setBasePairColors({A: 'blue', T: 'yellow', G: 'green', C: 'red'})\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [sequenceStyle])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('geneData')\r\n        console.log(geneData)\r\n    }, [geneData])\r\n\r\n\r\n\r\n    // the following functionality can be moved to a consise location\r\n\r\n    // custom annotation handling\r\n    function handleAddAnnotation() {\r\n        setIsAnnotating(!isAnnotating)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAnnotating === true) {\r\n            document.addEventListener('mousedown', handleStartDrag, {once: true})\r\n            document.addEventListener('mouseup', handleDragEnd, {once: true})\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isAnnotating, triggerHighlight])\r\n\r\n    const highlightedBp = []\r\n\r\n    function handleStartDrag(event) {\r\n        highlightedBp.splice(0, highlightedBp.length)\r\n        if(event.target.className === 'bp') {\r\n            document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n            highlightedBp.push(event.target.id)\r\n            document.addEventListener('mouseover', handleWhileDragging)\r\n        }\r\n    }\r\n\r\n    function handleWhileDragging(event) {\r\n        const basepair = event.target.id\r\n        if(event.target.className === 'bp') {\r\n            if(parseInt(basepair) === parseInt(Math.max(...highlightedBp)+1) || parseInt(basepair) ===  parseInt(Math.min(...highlightedBp)-1)) {\r\n                document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n                highlightedBp.push(event.target.id)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleDragEnd() {\r\n        const bpLowToHigh = highlightedBp.sort((a, b) => a - b)\r\n        setAnnotationSequence(bpLowToHigh)\r\n        document.removeEventListener('mouseover', handleWhileDragging)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(annotationSequence.length > 1) {\r\n            setAnnotationText(<Annotation basepairs={annotationSequence} transcriptIndex={-1} isProtein={false} annotationToggle={annotationToggle} triggerAnnotation={triggerAnnotation} setTriggerAnnotation={setTriggerAnnotation} setAnnotationText={setAnnotationText} setTriggerHighlight={setTriggerHighlight} triggerHighlight={triggerHighlight} geneData={geneData}/>)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [annotationSequence])\r\n\r\n    // end\r\n\r\n\r\n    // get annotations\r\n    useEffect(() => { // note: need to configure for dna, rna, or protein\r\n        fetch('/annotations', {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ symbol: geneData.symbol })\r\n            })\r\n            .then(resp => resp.json())\r\n            .then(data => setAnnotations(data))\r\n    }, [geneData, triggerAnnotation])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"workspace\" style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', backgroundColor: 'white' }}>\r\n            <SequenceHeader geneData={geneData} annotations={annotations} annotationToggle={annotationToggle} setAnnotationToggle={setAnnotationToggle} handleAddAnnotation={handleAddAnnotation} setAnnotationText={setAnnotationText} triggerAnnotation={triggerAnnotation} sequenceStyle={sequenceStyle} setSequenceStyle={setSequenceStyle} rerenderLibrary={rerenderLibrary} setRerenderLibrary={setRerenderLibrary} rawSequence={rawSequence} isAnnotating={isAnnotating}/>\r\n            <SequenceRender sequenceArray={sequenceArray} setIconVisibility={setIconVisibility} setVisibility={setVisibility} visibility={visibility} basePairColors={basePairColors} selectedRegion={selectedRegion} setShowMoreButton={setShowMoreButton} setSelectedRegion={setSelectedRegion} reload={reload} annotationText={annotationText} />\r\n            <LoadingGIF iconVisibility={iconVisibility} dnaContainerSize={dnaContainerSize}/>\r\n            {showMoreButton}\r\n            <InfoPanel geneData={geneData} sequenceArray={sequenceArray} infoPanelLabels={infoPanelLabels}/>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}