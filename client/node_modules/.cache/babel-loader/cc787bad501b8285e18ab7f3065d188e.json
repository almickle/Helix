{"ast":null,"code":"// import { useEffect, useState } from 'react'\n// import Bookmark from '../../assets/Bookmark.png'\n// import BookmarkColored from '../../assets/BookmarkColored.png'\n// import CopyIcon from '../../assets/CopyIcon.png'\n// import PaintBrush from '../../assets/PaintBrush.png'\n// import Circles from '../../assets/Circles.png'\n// import BookIcon from '../../assets/BookIcon.png'\n// import Note from '../Note'\n// export default function SequenceHeader ( { geneData, annotations, annotationToggle, setAnnotationToggle, setAnnotationText, sequenceStyle, setSequenceStyle, rerenderLibrary, setRerenderLibrary, rawSequence, handleAddAnnotation, isAnnotating } ) {\n//     const labelMargin = 7\n//     const headerSize = 60\n//     const [inLibrary, setInLibrary] = useState(false)\n//     const [bookmarkIcon, setBookmarkIcon] = useState(Bookmark)\n//     const [paintbrushColor, setPaintbrushColor] = useState()\n//     const [bookColor, setBookColor] = useState()\n//     // note: should migrate header icon functionalities to specialized components\n//     function setStyling() {\n//         setSequenceStyle(!sequenceStyle)\n//     }\n//     function handleAddToClipboard() {\n//         navigator.clipboard.writeText(rawSequence)\n//     }\n//     function handleAddToLibrary() {\n//         if(inLibrary === true) {\n//             fetch('/removegene', {\n//                 method: 'POST',\n//                 headers: {\n//                     \"Content-Type\": 'application/json'\n//                 },\n//                 credentials: 'include',\n//                 body: JSON.stringify({ symbol: geneData.symbol })\n//             })\n//             .then(() => {\n//                 setRerenderLibrary(!rerenderLibrary)\n//                 setInLibrary(false)\n//             })\n//         }\n//         else {\n//             fetch('/addgene', {\n//                 method: 'POST',\n//                 headers: {\n//                     \"Content-Type\": 'application/json'\n//                 },\n//                 credentials: 'include',\n//                 body: JSON.stringify({ symbol: geneData.symbol, taxon: geneData.taxname })\n//             })\n//             .then(() => {\n//                 setRerenderLibrary(!rerenderLibrary)\n//                 setInLibrary(true)\n//             })\n//         }\n//     }\n//     // get library\n//     useEffect(() => {\n//         const library = []\n//         fetch('/genelibrary', {\n//             headers: {\n//                 \"Content-Type\": 'application/json'\n//             },\n//             credentials: 'include'\n//         })\n//         .then(resp => resp.json())\n//         .then(data => {\n//             data.forEach((gene) => {\n//                 library.push(gene.symbol)\n//             })\n//             if(library.includes(geneData.symbol)) {\n//                 setInLibrary(true)\n//             } \n//             else {\n//                 setInLibrary(false)\n//             }\n//         })\n//     }, [geneData])\n//     // check if in library\n//     useEffect(() => {\n//         if(inLibrary === true) { // bug: should only add to library if post successful\n//             setBookmarkIcon(BookmarkColored)\n//         } \n//         else {\n//             setBookmarkIcon(Bookmark)\n//         }\n//     }, [inLibrary])\n//     // enable annotating\n//     useEffect(() => {\n//         if(isAnnotating === true) {\n//            setPaintbrushColor('white')\n//         } \n//         else {\n//             setPaintbrushColor('unset')\n//         }\n//     }, [isAnnotating])\n//     function toggleAnnotations () {\n//         setAnnotationToggle(!annotationToggle)\n//     }\n//     function showAnnotations(annotations) {\n//         const basepairIDs = []\n//         annotations.forEach((annotation) => {\n//             for(let i=annotation.begin; i <= annotation.end; i++) {\n//                 basepairIDs.push(i)\n//             }\n//         })\n//         basepairIDs.forEach((id) => {\n//             document.getElementById(id).style.backgroundColor = 'yellow'\n//         })\n//     }\n//     function hideAnnotations(annotations) {\n//         const basepairIDs = []\n//         setAnnotationText(null)\n//         annotations.forEach((annotation) => {\n//             for(let i=annotation.begin; i <= annotation.end; i++) {\n//                 basepairIDs.push(i)\n//             }\n//         })\n//         basepairIDs.forEach((id) => {\n//             if(document.getElementById(id)) {\n//                 document.getElementById(id).style.backgroundColor = 'unset'\n//             }\n//         })\n//     }\n//     useEffect(() => {\n//         if(annotationToggle === true) {\n//             setBookColor('white')\n//             showAnnotations(annotations)\n//         } \n//         else {\n//             setBookColor('unset')\n//             hideAnnotations(annotations)\n//         }\n//         // eslint-disable-next-line\n//     }, [annotationToggle, annotations])\n//     function showNote(event) {\n//         if(event.target.className === 'bp') {\n//             annotations.forEach((annotation) => {\n//                 const basepairIDs = []\n//                 for(let i=annotation.begin; i <= annotation.end; i++) {\n//                     basepairIDs.push(i)\n//                 }\n//                 basepairIDs.forEach((id) => {\n//                     if(parseInt(event.target.id) === id) {\n//                         setAnnotationText(<Note basepairs={basepairIDs} content={annotation}/>)\n//                     }\n//                 })                 \n//             })\n//         }\n//         else {\n//             setAnnotationText(null)\n//         }\n//     }\n//     useEffect(() => { // bug: remove event listener when gene changes\n//         if(annotationToggle === true) {\n//             document.addEventListener('click', showNote)\n//         } \n//         return () => {\n//             document.removeEventListener('click', showNote)\n//         }\n//         // eslint-disable-next-line\n//     }, [annotationToggle])\n//     // note: need to style header and icons\n//     return (\n//         <div id=\"header\" style={{ zIndex: 2, position: 'fixed', height: headerSize, width: '70%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgb(220, 220, 220)', borderRadius: '0px 0px 10px 10px' }}>\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={setStyling} src={Circles} style={{ height: '80%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 12, paddingRight: 12, backgroundColor: bookColor }}><img onClick={toggleAnnotations} src={BookIcon} style={{ height: '72%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6, backgroundColor: paintbrushColor}}><img onClick={handleAddAnnotation} src={PaintBrush} style={{ height: '115%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={handleAddToLibrary} src={bookmarkIcon} style={{ height: '110%', cursor: 'pointer' }} alt=\"bookmark icon: add to library\" /> </span>\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={handleAddToClipboard} src={CopyIcon} style={{ height: '100%', cursor: 'pointer' }} alt=\"copy icon: add to clipboard\" /> </span>\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/micha/OneDrive/Documents/Code/helix-app/client/src/components/views/sequence-header/SequenceHeader.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react'\r\n// import Bookmark from '../../assets/Bookmark.png'\r\n// import BookmarkColored from '../../assets/BookmarkColored.png'\r\n// import CopyIcon from '../../assets/CopyIcon.png'\r\n// import PaintBrush from '../../assets/PaintBrush.png'\r\n// import Circles from '../../assets/Circles.png'\r\n// import BookIcon from '../../assets/BookIcon.png'\r\n// import Note from '../Note'\r\n\r\n\r\n// export default function SequenceHeader ( { geneData, annotations, annotationToggle, setAnnotationToggle, setAnnotationText, sequenceStyle, setSequenceStyle, rerenderLibrary, setRerenderLibrary, rawSequence, handleAddAnnotation, isAnnotating } ) {\r\n\r\n//     const labelMargin = 7\r\n//     const headerSize = 60\r\n\r\n//     const [inLibrary, setInLibrary] = useState(false)\r\n//     const [bookmarkIcon, setBookmarkIcon] = useState(Bookmark)\r\n//     const [paintbrushColor, setPaintbrushColor] = useState()\r\n\r\n//     const [bookColor, setBookColor] = useState()\r\n\r\n\r\n//     // note: should migrate header icon functionalities to specialized components\r\n\r\n//     function setStyling() {\r\n//         setSequenceStyle(!sequenceStyle)\r\n//     }\r\n\r\n//     function handleAddToClipboard() {\r\n//         navigator.clipboard.writeText(rawSequence)\r\n//     }\r\n\r\n//     function handleAddToLibrary() {\r\n//         if(inLibrary === true) {\r\n//             fetch('/removegene', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     \"Content-Type\": 'application/json'\r\n//                 },\r\n//                 credentials: 'include',\r\n//                 body: JSON.stringify({ symbol: geneData.symbol })\r\n//             })\r\n//             .then(() => {\r\n//                 setRerenderLibrary(!rerenderLibrary)\r\n//                 setInLibrary(false)\r\n//             })\r\n//         }\r\n//         else {\r\n//             fetch('/addgene', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     \"Content-Type\": 'application/json'\r\n//                 },\r\n//                 credentials: 'include',\r\n//                 body: JSON.stringify({ symbol: geneData.symbol, taxon: geneData.taxname })\r\n//             })\r\n//             .then(() => {\r\n//                 setRerenderLibrary(!rerenderLibrary)\r\n//                 setInLibrary(true)\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     // get library\r\n//     useEffect(() => {\r\n//         const library = []\r\n//         fetch('/genelibrary', {\r\n//             headers: {\r\n//                 \"Content-Type\": 'application/json'\r\n//             },\r\n//             credentials: 'include'\r\n//         })\r\n//         .then(resp => resp.json())\r\n//         .then(data => {\r\n//             data.forEach((gene) => {\r\n//                 library.push(gene.symbol)\r\n//             })\r\n//             if(library.includes(geneData.symbol)) {\r\n//                 setInLibrary(true)\r\n//             } \r\n//             else {\r\n//                 setInLibrary(false)\r\n//             }\r\n//         })\r\n//     }, [geneData])\r\n\r\n//     // check if in library\r\n//     useEffect(() => {\r\n//         if(inLibrary === true) { // bug: should only add to library if post successful\r\n//             setBookmarkIcon(BookmarkColored)\r\n//         } \r\n//         else {\r\n//             setBookmarkIcon(Bookmark)\r\n//         }\r\n//     }, [inLibrary])\r\n\r\n//     // enable annotating\r\n//     useEffect(() => {\r\n//         if(isAnnotating === true) {\r\n//            setPaintbrushColor('white')\r\n//         } \r\n//         else {\r\n//             setPaintbrushColor('unset')\r\n//         }\r\n//     }, [isAnnotating])\r\n\r\n\r\n//     function toggleAnnotations () {\r\n//         setAnnotationToggle(!annotationToggle)\r\n//     }\r\n\r\n//     function showAnnotations(annotations) {\r\n//         const basepairIDs = []\r\n//         annotations.forEach((annotation) => {\r\n//             for(let i=annotation.begin; i <= annotation.end; i++) {\r\n//                 basepairIDs.push(i)\r\n//             }\r\n//         })\r\n//         basepairIDs.forEach((id) => {\r\n//             document.getElementById(id).style.backgroundColor = 'yellow'\r\n//         })\r\n//     }\r\n\r\n//     function hideAnnotations(annotations) {\r\n//         const basepairIDs = []\r\n//         setAnnotationText(null)\r\n//         annotations.forEach((annotation) => {\r\n//             for(let i=annotation.begin; i <= annotation.end; i++) {\r\n//                 basepairIDs.push(i)\r\n//             }\r\n//         })\r\n//         basepairIDs.forEach((id) => {\r\n//             if(document.getElementById(id)) {\r\n//                 document.getElementById(id).style.backgroundColor = 'unset'\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         if(annotationToggle === true) {\r\n//             setBookColor('white')\r\n//             showAnnotations(annotations)\r\n//         } \r\n//         else {\r\n//             setBookColor('unset')\r\n//             hideAnnotations(annotations)\r\n//         }\r\n//         // eslint-disable-next-line\r\n//     }, [annotationToggle, annotations])\r\n\r\n\r\n//     function showNote(event) {\r\n//         if(event.target.className === 'bp') {\r\n//             annotations.forEach((annotation) => {\r\n//                 const basepairIDs = []\r\n//                 for(let i=annotation.begin; i <= annotation.end; i++) {\r\n//                     basepairIDs.push(i)\r\n//                 }\r\n//                 basepairIDs.forEach((id) => {\r\n//                     if(parseInt(event.target.id) === id) {\r\n//                         setAnnotationText(<Note basepairs={basepairIDs} content={annotation}/>)\r\n//                     }\r\n//                 })                 \r\n//             })\r\n//         }\r\n//         else {\r\n//             setAnnotationText(null)\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => { // bug: remove event listener when gene changes\r\n//         if(annotationToggle === true) {\r\n//             document.addEventListener('click', showNote)\r\n//         } \r\n//         return () => {\r\n//             document.removeEventListener('click', showNote)\r\n//         }\r\n//         // eslint-disable-next-line\r\n//     }, [annotationToggle])\r\n\r\n\r\n\r\n    \r\n//     // note: need to style header and icons\r\n\r\n//     return (\r\n//         <div id=\"header\" style={{ zIndex: 2, position: 'fixed', height: headerSize, width: '70%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgb(220, 220, 220)', borderRadius: '0px 0px 10px 10px' }}>\r\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\r\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\r\n//             <span style={{ display: 'flex', flexDirection: 'row', marginLeft: `${labelMargin/6}%`, marginRight: `${labelMargin/6}%` }}>Add feature</span>\r\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={setStyling} src={Circles} style={{ height: '80%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\r\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 12, paddingRight: 12, backgroundColor: bookColor }}><img onClick={toggleAnnotations} src={BookIcon} style={{ height: '72%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\r\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6, backgroundColor: paintbrushColor}}><img onClick={handleAddAnnotation} src={PaintBrush} style={{ height: '115%', cursor: 'pointer' }} alt=\"paint icon: make an annotation\" /> </span>\r\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={handleAddToLibrary} src={bookmarkIcon} style={{ height: '110%', cursor: 'pointer' }} alt=\"bookmark icon: add to library\" /> </span>\r\n//             <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', paddingLeft: 6, paddingRight: 6 }}><img onClick={handleAddToClipboard} src={CopyIcon} style={{ height: '100%', cursor: 'pointer' }} alt=\"copy icon: add to clipboard\" /> </span>\r\n//         </div>\r\n//     )\r\n// }"],"mappings},"metadata":{},"sourceType":"module"}