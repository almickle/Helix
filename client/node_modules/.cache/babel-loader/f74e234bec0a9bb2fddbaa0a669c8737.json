{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Documents\\\\Code\\\\helix-app\\\\client\\\\src\\\\components\\\\views\\\\ViewRNA.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport XMLParser from 'react-xml-parser';\nimport SequenceRender from \"./SequenceRender\";\nimport InfoPanel from \"./InfoPanel\";\nimport LoadingGIF from \"./LoadingGIF\";\nimport SequenceHeader from \"./sequence-header/SequenceHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewRNA(_ref) {\n  _s();\n\n  let {\n    geneData,\n    annotationText,\n    setAnnotationText,\n    sequenceID,\n    transcriptIndex,\n    reload,\n    rerenderLibrary,\n    setRerenderLibrary\n  } = _ref;\n  const dnaContainerSize = 90;\n  const infoPanelLabels = {\n    type: 'mRNA',\n    unit: 'bp',\n    info: ['Transcript', parseInt(transcriptIndex) + 1]\n  };\n  const [visibility, setVisibility] = useState('hidden');\n  const [iconVisibility, setIconVisibility] = useState('visible');\n  const [showMoreButton, setShowMoreButton] = useState();\n  const [rawSequence, setRawSequence] = useState('');\n  const [sequenceArray, setSequenceArray] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState([0, 10000]);\n  const [sequenceStyle, setSequenceStyle] = useState(false);\n  const [basePairColors, setBasePairColors] = useState({\n    A: 'black',\n    T: 'black',\n    G: 'black',\n    C: 'black'\n  });\n  const [triggerAnnotation, setTriggerAnnotation] = useState(false); // const [annotationToggle, setAnnotationToggle] = useState(false)\n\n  const [annotations, setAnnotations] = useState([]);\n  useEffect(() => {\n    fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&id=' + sequenceID + '&rettype=FASTA&retmode=xml').then(resp => resp.text()).then(data => {\n      const seq = new XMLParser().parseFromString(data).children[0].children[0].children[6].value;\n      setRawSequence(seq);\n      setSequenceArray(seq.split(''));\n    });\n  }, [sequenceID]); // note: should migrate to a style specific component\n\n  useEffect(() => {\n    switch (sequenceStyle) {\n      case false:\n        setBasePairColors({\n          A: 'black',\n          T: 'black',\n          G: 'black',\n          C: 'black'\n        });\n        break;\n\n      case true:\n        setBasePairColors({\n          A: 'blue',\n          T: 'yellow',\n          G: 'green',\n          C: 'red'\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [sequenceStyle]); // the following functionality can be moved to a consise location\n  // // custom annotation handling\n  // function handleAddAnnotation() {\n  //     setIsAnnotating(!isAnnotating)\n  // }\n  // useEffect(() => {\n  //     if(isAnnotating === true) {\n  //         document.addEventListener('mousedown', handleStartDrag, {once: true})\n  //         document.addEventListener('mouseup', handleDragEnd, {once: true})\n  //     }\n  //     // eslint-disable-next-line\n  // }, [isAnnotating, triggerHighlight])\n  // const highlightedBp = []\n  // function handleStartDrag(event) {\n  //     highlightedBp.splice(0, highlightedBp.length)\n  //     if(event.target.className === 'bp') {\n  //         document.getElementById(event.target.id).style.backgroundColor = 'yellow'\n  //         highlightedBp.push(event.target.id)\n  //         document.addEventListener('mouseover', handleWhileDragging)\n  //     }\n  // }\n  // function handleWhileDragging(event) {\n  //     const basepair = event.target.id\n  //     if(event.target.className === 'bp') {\n  //         if(parseInt(basepair) === parseInt(Math.max(...highlightedBp)+1) || parseInt(basepair) ===  parseInt(Math.min(...highlightedBp)-1)) {\n  //             document.getElementById(event.target.id).style.backgroundColor = 'yellow'\n  //             highlightedBp.push(event.target.id)\n  //         }\n  //     }\n  // }\n  // function handleDragEnd() {\n  //     const bpLowToHigh = highlightedBp.sort((a, b) => a - b)\n  //     setAnnotationSequence(bpLowToHigh)\n  //     document.removeEventListener('mouseover', handleWhileDragging)\n  // }\n  // useEffect(() => {\n  //     if(annotationSequence.length > 1) {\n  //         setAnnotationText(<Annotation basepairs={annotationSequence} transcriptIndex={transcriptIndex} isProtein={false} annotationToggle={annotationToggle} triggerAnnotation={triggerAnnotation} setTriggerAnnotation={setTriggerAnnotation} setAnnotationText={setAnnotationText} setTriggerHighlight={setTriggerHighlight} triggerHighlight={triggerHighlight} geneData={geneData}/>)\n  //     }\n  //     // eslint-disable-next-line\n  // }, [annotationSequence])\n  // end\n  // get annotations\n\n  useEffect(() => {\n    // note: need to configure for dna, rna, or protein\n    fetch('/annotations', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symbol: geneData.symbol\n      })\n    }).then(resp => resp.json()).then(data => setAnnotations(data));\n  }, [geneData, triggerAnnotation]);\n  useEffect(() => {\n    console.log('geneData');\n    console.log(geneData);\n  }, [geneData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"workspace\",\n    style: {\n      height: 'fit-content',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      backgroundColor: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SequenceHeader, {\n      geneData: geneData,\n      setSelectedRegion: setSelectedRegion,\n      selectedRegion: selectedRegion,\n      annotations: annotations,\n      setAnnotationText: setAnnotationText,\n      setTriggerAnnotation: setTriggerAnnotation,\n      triggerAnnotation: triggerAnnotation,\n      sequenceStyle: sequenceStyle,\n      setSequenceStyle: setSequenceStyle,\n      rerenderLibrary: rerenderLibrary,\n      setRerenderLibrary: setRerenderLibrary,\n      rawSequence: rawSequence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SequenceRender, {\n      sequenceArray: sequenceArray,\n      annotationText: annotationText,\n      setIconVisibility: setIconVisibility,\n      setVisibility: setVisibility,\n      visibility: visibility,\n      basePairColors: basePairColors,\n      selectedRegion: selectedRegion,\n      setShowMoreButton: setShowMoreButton,\n      setSelectedRegion: setSelectedRegion,\n      reload: reload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoadingGIF, {\n      iconVisibility: iconVisibility,\n      dnaContainerSize: dnaContainerSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), showMoreButton, /*#__PURE__*/_jsxDEV(InfoPanel, {\n      geneData: geneData,\n      sequenceArray: sequenceArray,\n      infoPanelLabels: infoPanelLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewRNA, \"axFlNG0yUe+ZNhbN+bgKCMRqRBs=\");\n\n_c = ViewRNA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewRNA\");","map":{"version":3,"names":["useState","useEffect","XMLParser","SequenceRender","InfoPanel","LoadingGIF","SequenceHeader","ViewRNA","geneData","annotationText","setAnnotationText","sequenceID","transcriptIndex","reload","rerenderLibrary","setRerenderLibrary","dnaContainerSize","infoPanelLabels","type","unit","info","parseInt","visibility","setVisibility","iconVisibility","setIconVisibility","showMoreButton","setShowMoreButton","rawSequence","setRawSequence","sequenceArray","setSequenceArray","selectedRegion","setSelectedRegion","sequenceStyle","setSequenceStyle","basePairColors","setBasePairColors","A","T","G","C","triggerAnnotation","setTriggerAnnotation","annotations","setAnnotations","fetch","then","resp","text","data","seq","parseFromString","children","value","split","method","credentials","headers","body","JSON","stringify","symbol","json","console","log","height","width","display","flexDirection","alignItems","backgroundColor"],"sources":["C:/Users/micha/OneDrive/Documents/Code/helix-app/client/src/components/views/ViewRNA.jsx"],"sourcesContent":["import { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport XMLParser from 'react-xml-parser'\r\nimport SequenceRender from \"./SequenceRender\"\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport LoadingGIF from \"./LoadingGIF\"\r\nimport SequenceHeader from \"./sequence-header/SequenceHeader\"\r\n\r\n\r\nexport default function ViewRNA ( { geneData, annotationText, setAnnotationText, sequenceID, transcriptIndex, reload, rerenderLibrary, setRerenderLibrary } ) {\r\n\r\n    const dnaContainerSize = 90\r\n    const infoPanelLabels = {type: 'mRNA', unit: 'bp', info: ['Transcript', parseInt(transcriptIndex)+1]}\r\n\r\n    const [visibility, setVisibility] = useState('hidden')\r\n    const [iconVisibility, setIconVisibility] = useState('visible')\r\n    const [showMoreButton, setShowMoreButton] = useState()\r\n\r\n    const [rawSequence, setRawSequence] = useState('')\r\n    const [sequenceArray, setSequenceArray] = useState([])\r\n    const [selectedRegion, setSelectedRegion] = useState([0, 10000])\r\n \r\n    const [sequenceStyle, setSequenceStyle] = useState(false)\r\n    const [basePairColors, setBasePairColors] = useState({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n\r\n    const [triggerAnnotation, setTriggerAnnotation] = useState(false)\r\n    // const [annotationToggle, setAnnotationToggle] = useState(false)\r\n    const [annotations, setAnnotations] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&id=' + sequenceID + '&rettype=FASTA&retmode=xml')\r\n        .then(resp => resp.text())\r\n        .then(data => { const seq = new XMLParser().parseFromString(data).children[0].children[0].children[6].value\r\n                        setRawSequence(seq)\r\n                        setSequenceArray(seq.split(''))\r\n        })\r\n    }, [sequenceID])\r\n\r\n\r\n    // note: should migrate to a style specific component\r\n\r\n    useEffect(() => {\r\n        switch (sequenceStyle) {\r\n            case false:\r\n                setBasePairColors({A: 'black', T: 'black', G: 'black', C: 'black'})\r\n                break;\r\n\r\n            case true:\r\n                setBasePairColors({A: 'blue', T: 'yellow', G: 'green', C: 'red'})\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [sequenceStyle])\r\n\r\n\r\n    // the following functionality can be moved to a consise location\r\n\r\n    // // custom annotation handling\r\n    // function handleAddAnnotation() {\r\n    //     setIsAnnotating(!isAnnotating)\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     if(isAnnotating === true) {\r\n    //         document.addEventListener('mousedown', handleStartDrag, {once: true})\r\n    //         document.addEventListener('mouseup', handleDragEnd, {once: true})\r\n    //     }\r\n    //     // eslint-disable-next-line\r\n    // }, [isAnnotating, triggerHighlight])\r\n\r\n    // const highlightedBp = []\r\n\r\n    // function handleStartDrag(event) {\r\n    //     highlightedBp.splice(0, highlightedBp.length)\r\n    //     if(event.target.className === 'bp') {\r\n    //         document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n    //         highlightedBp.push(event.target.id)\r\n    //         document.addEventListener('mouseover', handleWhileDragging)\r\n    //     }\r\n    // }\r\n\r\n    // function handleWhileDragging(event) {\r\n    //     const basepair = event.target.id\r\n    //     if(event.target.className === 'bp') {\r\n    //         if(parseInt(basepair) === parseInt(Math.max(...highlightedBp)+1) || parseInt(basepair) ===  parseInt(Math.min(...highlightedBp)-1)) {\r\n    //             document.getElementById(event.target.id).style.backgroundColor = 'yellow'\r\n    //             highlightedBp.push(event.target.id)\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // function handleDragEnd() {\r\n    //     const bpLowToHigh = highlightedBp.sort((a, b) => a - b)\r\n    //     setAnnotationSequence(bpLowToHigh)\r\n    //     document.removeEventListener('mouseover', handleWhileDragging)\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     if(annotationSequence.length > 1) {\r\n    //         setAnnotationText(<Annotation basepairs={annotationSequence} transcriptIndex={transcriptIndex} isProtein={false} annotationToggle={annotationToggle} triggerAnnotation={triggerAnnotation} setTriggerAnnotation={setTriggerAnnotation} setAnnotationText={setAnnotationText} setTriggerHighlight={setTriggerHighlight} triggerHighlight={triggerHighlight} geneData={geneData}/>)\r\n    //     }\r\n    //     // eslint-disable-next-line\r\n    // }, [annotationSequence])\r\n\r\n    // end\r\n\r\n    // get annotations\r\n    useEffect(() => { // note: need to configure for dna, rna, or protein\r\n        fetch('/annotations', {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ symbol: geneData.symbol })\r\n            })\r\n            .then(resp => resp.json())\r\n            .then(data => setAnnotations(data))\r\n    }, [geneData, triggerAnnotation])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('geneData')\r\n        console.log(geneData)\r\n    }, [geneData])\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"workspace\" style={{ height: 'fit-content', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', backgroundColor: 'white' }}>\r\n            <SequenceHeader geneData={geneData} setSelectedRegion={setSelectedRegion} selectedRegion={selectedRegion} annotations={annotations} setAnnotationText={setAnnotationText} setTriggerAnnotation={setTriggerAnnotation} triggerAnnotation={triggerAnnotation} sequenceStyle={sequenceStyle} setSequenceStyle={setSequenceStyle} rerenderLibrary={rerenderLibrary} setRerenderLibrary={setRerenderLibrary} rawSequence={rawSequence} />\r\n            <SequenceRender sequenceArray={sequenceArray} annotationText={annotationText} setIconVisibility={setIconVisibility} setVisibility={setVisibility} visibility={visibility} basePairColors={basePairColors} selectedRegion={selectedRegion} setShowMoreButton={setShowMoreButton} setSelectedRegion={setSelectedRegion} reload={reload}/>\r\n            <LoadingGIF iconVisibility={iconVisibility} dnaContainerSize={dnaContainerSize}/>\r\n            {showMoreButton}\r\n            <InfoPanel geneData={geneData} sequenceArray={sequenceArray} infoPanelLabels={infoPanelLabels}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}